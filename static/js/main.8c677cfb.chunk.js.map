{"version":3,"sources":["pin.png","photos.csv","MapWidget.js","Search.js","Table.js","loadData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GoogleApiWrapper","apiKey","process","props","mapStyle","className","coords","latitude","longitude","google","zoom","style","width","height","onClick","t","map","coord","latLng","lat","lng","setCoords","initialCenter","onReady","mapProps","setOptions","styles","_mapLoaded","position","draggable","onDragend","icon","url","customIcon","scaledSize","maps","Size","photos","pic","btnClick","Search","useState","appState","setAppState","toggleMap","evt","state","id","close","readOnly","type","value","sortPhotos","Table","textAlign","href","openSearch","length","photo","index","key","src","alt","title","created","creator","notes","a","Papa","fetchCsv","data","parse","result","csvJSON","fetch","csvPhotos","response","reader","body","getReader","read","decoder","TextDecoder","decode","csv","lines","headers","i","obj","currentline","j","push","GetData","App","filteredPhotos","search","searchState","setSearchState","useEffect","getPhotos","compareDistance","p1","p2","calculateDistance","long","lat1","long1","x","Math","abs","y","sqrt","arr","sort","newArr","filter","dist","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,+NCkP5BC,iCAAiB,CAC9BC,OAAO,GAAD,OAAKC,4CADEF,EA5Of,SAAmBG,GAElB,IAKMC,EAAW,CACb,CACI,YAAe,iBACf,YAAe,mBACf,QAAW,CACP,CACI,MAAS,aAIrB,CACI,YAAe,YACf,YAAe,MACf,QAAW,CACP,CACI,MAAS,aAIrB,CACI,YAAe,YACf,YAAe,WACf,QAAW,CACP,CACI,MAAS,aAIrB,CACI,YAAe,MACf,YAAe,MACf,QAAW,CACP,CACI,WAAc,SAI1B,CACI,YAAe,OACf,YAAe,MACf,QAAW,CACP,CACI,YAAe,KAEnB,CACI,UAAa,MAIzB,CACI,YAAe,eACf,YAAe,MACf,QAAW,CACP,CACI,WAAc,gBAI1B,CACI,YAAe,eACf,YAAe,gBACf,QAAW,CACP,CACI,MAAS,WAEb,CACI,WAAc,OAElB,CACI,UAAa,QAIzB,CACI,YAAe,gBACf,YAAe,MACf,QAAW,CACP,CACI,WAAc,gBAI1B,CACI,YAAe,gBACf,YAAe,SACf,QAAW,CACP,CACI,WAAc,MAElB,CACI,UAAa,QAIzB,CACI,YAAe,gBACf,YAAe,cACf,QAAW,CACP,CACI,WAAc,SAI1B,CACI,YAAe,aACf,YAAe,MACf,QAAW,CACP,CACI,WAAc,QAI1B,CACI,YAAe,aACf,YAAe,SACf,QAAW,CACP,CACI,WAAc,gBAI1B,CACI,YAAe,UACf,YAAe,MACf,QAAW,CACP,CACI,WAAc,SAI1B,CACI,YAAe,QACf,YAAe,MACf,QAAW,CACP,CACI,MAAS,WAEb,CACI,WAAc,QAI1B,CACI,YAAe,QACf,YAAe,gBACf,QAAW,CACP,CACI,MAAS,WAEb,CACI,WAAc,OAElB,CACI,UAAa,SA2C1B,OACC,yBAAKC,UAAU,eACd,yBAAKA,UAAU,aACX,mDACA,wCAAcF,EAAMG,OAAOC,UAC3B,yCAAeJ,EAAMG,OAAOE,YAE7B,kBAAC,MAAD,CACEC,OAAQN,EAAMM,OACdC,KAAM,GACNC,MAnNQ,CAChBC,MAAO,QACPC,OAAQ,SAkNAC,QA1CO,SAACC,EAAGC,EAAKC,GAAW,IACzBC,EAAWD,EAAXC,OACFC,EAAMD,EAAOC,MACbC,EAAMF,EAAOE,MAEnBjB,EAAMkB,UAAU,CAACd,SAAUY,EAAKX,UAAWY,KAsCrCE,cAAe,CAAEH,IAAKhB,EAAMG,OAAOC,SAAUa,IAAKjB,EAAMG,OAAOE,WAC/De,QAAS,SAACC,EAAUR,GAAX,OAlDA,SAACQ,EAAUR,GAC1BA,EAAIS,WAAW,CACZC,OAAQtB,IAgDuBuB,CAAWH,EAAUR,KAElD,kBAAC,SAAD,CAAQY,SAAU,CAClBT,IAAKhB,EAAMG,OAAOC,SAClBa,IAAKjB,EAAMG,OAAOE,WAErBqB,WAAW,EACLC,UA3Cc,SAACf,EAAGC,EAAKC,GAAW,IACnCC,EAAWD,EAAXC,OACDC,EAAMD,EAAOC,MACbC,EAAMF,EAAOE,MAEpBjB,EAAMkB,UAAU,CAACd,SAAUY,EAAKX,UAAWY,KAuCxCW,KAAM,CACJC,IAAKC,IACLC,WAAY,IAAIzB,OAAO0B,KAAKC,KAAK,GAAG,OArCjCjC,EAAMkC,OAAOrB,KAAI,SAACsB,GACxB,OACC,kBAAC,SAAD,CAAQV,SAAU,CACfT,IAAKmB,EAAI/B,SACTa,IAAKkB,EAAI9B,WAEZuB,KAAM,CACJC,IAAKM,EAAIN,IACTE,WAAY,IAAIzB,OAAO0B,KAAKC,KAAK,GAAG,WAiCpC,4BAAQtB,QAASX,EAAMoC,UAAvB,WAAiD,4BAAQzB,QAASX,EAAMoC,SAAUlC,UAAU,UAA3C,cC5M3CmC,MA7Bf,SAAgBrC,GAAQ,IAAD,EAEUsC,mBAAS,CACxCzB,KAAK,IAHgB,mBAEf0B,EAFe,KAELC,EAFK,KAMhBC,EAAY,SAACC,GAClB,IAAIC,EAAQJ,EAAS1B,IACrB2B,EAAY,CAAC3B,KAAM8B,KAGpB,OACC,yBAAKzC,UAAU,kBACd,yBAAKA,UAAU,UACd,uBAAG0C,GAAG,QAAQjC,QAASX,EAAM6C,OAA7B,KACA,+CACCN,EAAS1B,IACT,kBAAC,EAAD,CAAWV,OAAQH,EAAMG,OAAQe,UAAWlB,EAAMkB,UAAWkB,SAAUK,EAAWP,OAAQlC,EAAMkC,SAChG,6BACI,qDACA,2BAAOY,UAAQ,EAACC,KAAK,OAAOC,MAAOhD,EAAMG,OAAOC,SAAW,KAAOJ,EAAMG,OAAOE,YAAa,4BAAQM,QAAS8B,GAAjB,OAAwC,6BACpI,4BAAQvC,UAAU,SAASS,QAASX,EAAMiD,YAA1C,cCkBMC,MAxCf,SAAelD,GAmBd,OACC,yBAAKE,UAAU,YACd,4CACA,uBAAGM,MAAO,CAAC2C,UAAW,WAAW,uBAAGC,KAAK,UAAUzC,QAASX,EAAMqD,YAAjC,oBACjC,+BACC,+BACC,4BACC,yCACA,qCACA,uCACA,uCAGF,+BA7BCrD,EAAMkC,OAAOoB,OAAS,EACjBtD,EAAMkC,OAAOrB,KAAI,SAAC0C,EAAOC,GAC/B,OACI,wBAAIC,IAAKD,GACR,4BAAI,yBAAKE,IAAKH,EAAM1B,IAAK8B,IAAKJ,EAAMK,SACpC,4BAAKL,EAAMK,OACX,4BAAKL,EAAMM,QAAX,IAAoB,6BAApB,QAA+BN,EAAMO,SACrC,4BAAKP,EAAMQ,WAKV,6D,8ECdV,8BAAAC,EAAA,kEACiBC,IADjB,SACkCC,IADlC,0BACUC,EADV,KACsBC,MADtB,gBAEUC,EAASC,EAAQH,EAAKA,MAFhC,kBAGWE,GAHX,4C,+BAMeH,I,2EAAf,oCAAAF,EAAA,sEAC2BO,MAAMC,KADjC,cACUC,EADV,OAEUC,EAASD,EAASE,KAAKC,YAFjC,SAGyBF,EAAOG,OAHhC,cAGUR,EAHV,OAIUS,EAAU,IAAIC,YAAY,SAJpC,UAKsBD,EAAQE,OAAOX,EAAOrB,OAL5C,eAKUiC,EALV,yBAMWA,GANX,6C,sBASA,SAASX,EAAQY,GAIhB,IAHA,IAAIb,EAAS,GACTc,EAAQD,EAAM,GAEVE,EAAE,EAAEA,EAAEF,EAAM5B,OAAO8B,IAAI,CAK9B,IAHA,IAAIC,EAAM,GACNC,EAAYJ,EAAME,GAEdG,EAAE,EAAEA,EAAEJ,EAAQ7B,OAAOiC,IAC3BF,EAAIF,EAAQI,IAAMD,EAAYC,GAGhClB,EAAOmB,KAAKH,GAIb,OAAOhB,EAGOoB,M,2CCiCAC,MAjEf,WAAgB,IAAD,EACepD,mBAAS,CACnClC,SAAU,UACVC,WAAY,YAHD,mBACNF,EADM,KACEe,EADF,OAMmBoB,mBAAS,CACvCJ,OAAQ,GACRyD,eAAgB,KARL,mBAMNpD,EANM,KAMIC,EANJ,OAWyBF,mBAAS,CAC7CsD,QAAQ,IAZG,mBAWNC,EAXM,KAWOC,EAXP,KAebC,qBAAU,YACS,uCAAG,4BAAA/B,EAAA,sEACOM,IADP,OACVG,EADU,OAEhBjC,EAAY,CAACN,OAAQuC,EAAUkB,eAAgBlB,IAF/B,2CAAH,qDAIfuB,KACD,CAACxD,IAEJ,IAaMyD,EAAkB,SAACC,EAAIC,GAC3B,OAAOC,EAAkBF,EAAG9F,SAAU8F,EAAG7F,WAAa+F,EAAkBD,EAAG/F,SAAU+F,EAAG9F,YAGpF+F,EAAoB,SAACpF,EAAKqF,GAC9B,IAAMC,EAAOnG,EAAOC,SACdmG,EAAQpG,EAAOE,UAEjBmG,EAAIC,KAAKC,IAAIJ,EAAOtF,GACpB2F,EAAIF,KAAKC,IAAIH,EAAOF,GACxB,OAA8B,MAAvBI,KAAKG,KAAKJ,EAAEA,EAAIG,EAAEA,IAO3B,OACE,yBAAKzG,UAAU,OACZ2F,EAAYD,OACX,kBAAC,EAAD,CAAQzF,OAAQA,EAAQe,UAAWA,EAAW+B,WAjCjC,WACjB6C,EAAe,CAACF,QAAQ,IACxB,IAAIiB,EAAMtE,EAASL,OACnB2E,EAAIC,KAAKb,GACT,IAAIc,EAASF,EAAIG,QAAO,SAACzD,GACvB,IAAI0D,EAAOb,EAAkB7C,EAAMnD,SAAUmD,EAAMlD,WAEnD,OADA6G,QAAQC,IAAIF,GACJA,EAAO,OAEjBC,QAAQC,IAAIJ,GACZvE,EAAY,CAACN,OAAQ2E,EAAKlB,eAAgBoB,KAuBgC7E,OAAQK,EAASL,OAAQW,MAAO,WAAOiD,EAAe,CAACF,QAAQ,OAErI,8BAEF,kBAAC,EAAD,CAAOzF,OAAQA,EAAQe,UAAWA,EAAWgB,OAAQK,EAASoD,eAAgBtC,WAX/D,SAACX,GAClBoD,EAAe,CAACF,QAAQ,SC5CRwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.8c677cfb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pin.a07280f4.png\";","module.exports = __webpack_public_path__ + \"static/media/photos.39e88c51.csv\";","/*global google*/\n\nimport React from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport customIcon from './pin.png';\n\nfunction MapWidget(props) {\n\n\tconst mapStyles = {\n\t  width: '400px',\n\t  height: '400px',\n\t};\n\n\tconst mapStyle = [\n\t    {\n\t        \"featureType\": \"administrative\",\n\t        \"elementType\": \"labels.text.fill\",\n\t        \"stylers\": [\n\t            {\n\t                \"color\": \"#444444\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"landscape\",\n\t        \"elementType\": \"all\",\n\t        \"stylers\": [\n\t            {\n\t                \"color\": \"#f2f2f2\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"landscape\",\n\t        \"elementType\": \"geometry\",\n\t        \"stylers\": [\n\t            {\n\t                \"color\": \"#efefef\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"poi\",\n\t        \"elementType\": \"all\",\n\t        \"stylers\": [\n\t            {\n\t                \"visibility\": \"off\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"road\",\n\t        \"elementType\": \"all\",\n\t        \"stylers\": [\n\t            {\n\t                \"saturation\": -100\n\t            },\n\t            {\n\t                \"lightness\": 45\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"road.highway\",\n\t        \"elementType\": \"all\",\n\t        \"stylers\": [\n\t            {\n\t                \"visibility\": \"simplified\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"road.highway\",\n\t        \"elementType\": \"geometry.fill\",\n\t        \"stylers\": [\n\t            {\n\t                \"color\": \"#ffbd83\"\n\t            },\n\t            {\n\t                \"saturation\": \"-16\"\n\t            },\n\t            {\n\t                \"lightness\": \"48\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"road.arterial\",\n\t        \"elementType\": \"all\",\n\t        \"stylers\": [\n\t            {\n\t                \"visibility\": \"simplified\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"road.arterial\",\n\t        \"elementType\": \"labels\",\n\t        \"stylers\": [\n\t            {\n\t                \"visibility\": \"on\"\n\t            },\n\t            {\n\t                \"lightness\": \"31\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"road.arterial\",\n\t        \"elementType\": \"labels.icon\",\n\t        \"stylers\": [\n\t            {\n\t                \"visibility\": \"off\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"road.local\",\n\t        \"elementType\": \"all\",\n\t        \"stylers\": [\n\t            {\n\t                \"visibility\": \"on\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"road.local\",\n\t        \"elementType\": \"labels\",\n\t        \"stylers\": [\n\t            {\n\t                \"visibility\": \"simplified\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"transit\",\n\t        \"elementType\": \"all\",\n\t        \"stylers\": [\n\t            {\n\t                \"visibility\": \"off\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"water\",\n\t        \"elementType\": \"all\",\n\t        \"stylers\": [\n\t            {\n\t                \"color\": \"#46bcec\"\n\t            },\n\t            {\n\t                \"visibility\": \"on\"\n\t            }\n\t        ]\n\t    },\n\t    {\n\t        \"featureType\": \"water\",\n\t        \"elementType\": \"geometry.fill\",\n\t        \"stylers\": [\n\t            {\n\t                \"color\": \"#8ad1c5\"\n\t            },\n\t            {\n\t                \"saturation\": \"-33\"\n\t            },\n\t            {\n\t                \"lightness\": \"55\"\n\t            }\n\t        ]\n\t    }\n\t]\n\n\tconst _mapLoaded = (mapProps, map) => {\n\t    map.setOptions({\n\t       styles: mapStyle\n\t    })\n\t }\n\n\tconst mapClick = (t, map, coord) => {\n\t    const { latLng } = coord;\n\t    const lat = latLng.lat();\n\t    const lng = latLng.lng();\n\n\t    props.setCoords({latitude: lat, longitude: lng});\n  \t}\n\n  \tconst onMarkerDragEnd = (t, map, coord) => {\n  \t\tconst { latLng } = coord;\n\t    const lat = latLng.lat();\n\t    const lng = latLng.lng();\n\n  \t\tprops.setCoords({latitude: lat, longitude: lng});\n  \t}\n\n  \tconst displayMarker = () => {\n\t    return props.photos.map((pic) => {\n\t    \treturn (\n\t\t    \t<Marker position={{\n\t\t\t       lat: pic.latitude,\n\t\t\t       lng: pic.longitude\n\t\t\t    }} \n\t\t\t    icon={{\n\t\t\t      url: pic.url,\n\t\t\t      scaledSize: new google.maps.Size(20,20)\n\t\t\t  \t}} />\n\t  \t\t);\n\t    });\n\t}\n\n    return (\n    \t<div className=\"map-wrapper\">\n    \t\t<div className='map-right'>\n\t        \t<h4>Capture Coordinates</h4>\n\t        \t<p>Latitude: {props.coords.latitude}</p>\n\t        \t<p>Longitude: {props.coords.longitude}</p>\n\t        </div>\n\t        <Map\n\t          google={props.google}\n\t          zoom={15}\n\t          style={mapStyles}\n\t          onClick={mapClick}\n\t          initialCenter={{ lat: props.coords.latitude, lng: props.coords.longitude}} \n\t          onReady={(mapProps, map) => _mapLoaded(mapProps, map)}\n\t        >\n\t        \t<Marker position={{\n\t\t\t       lat: props.coords.latitude,\n\t\t\t       lng: props.coords.longitude\n\t\t\t    }} \n\t\t\t    draggable={true} \n\t            onDragend={onMarkerDragEnd} \n\t\t\t    icon={{\n\t\t\t      url: customIcon,\n\t\t\t      scaledSize: new google.maps.Size(24,33)\n\t\t\t  \t}} />\n\t        \t{displayMarker()}\n\t        </Map>\n\t        <button onClick={props.btnClick}>Capture</button><button onClick={props.btnClick} className=\"cancel\">Cancel</button>\n        </div>\n    );\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: `${process.env.REACT_APP_GOOGLE_API_KEY}`\n})(MapWidget);","import React, { useState } from 'react';\nimport MapWidget from './MapWidget';\n\nfunction Search(props) {\n\n\tconst [appState, setAppState] = useState({\n\t\tmap: false\n\t})\n\n\tconst toggleMap = (evt) => {\n\t\tlet state = appState.map;\n\t\tsetAppState({map: !state});\n\t}\n\n\treturn (\n\t\t<div className=\"search-overlay\">\n\t\t\t<div className=\"search\">\n\t\t\t\t<p id=\"close\" onClick={props.close}>X</p>\n\t\t\t\t<h2>Advanced Search</h2>\n\t\t\t\t{appState.map ?\n\t\t\t\t\t<MapWidget coords={props.coords} setCoords={props.setCoords} btnClick={toggleMap} photos={props.photos}/> :\n\t\t\t\t\t<div>\n\t\t\t\t    \t<p>Add Location to Search</p>\n\t\t\t\t    \t<input readOnly type=\"text\" value={props.coords.latitude + \", \" + props.coords.longitude} /><button onClick={toggleMap}>Get</button><br/>\n\t\t\t\t    \t<button className=\"submit\" onClick={props.sortPhotos}>Search</button>\n\t\t\t    \t</div>\n\t\t\t    }\n\t\t    </div>\n\t\t</div>\n\t);\n}\n\nexport default Search;\n","import React from 'react';\n\nfunction Table(props) {\n\n\tconst arrayToTable = () => {\n\t\tif(props.photos.length > 0) {\n\t\t\treturn props.photos.map((photo, index) => {\n\t\t\t\treturn (\n\t    \t\t\t<tr key={index}>\n\t    \t\t\t\t<td><img src={photo.url} alt={photo.title} /></td>\n\t    \t\t\t\t<td>{photo.title}</td>\n\t    \t\t\t\t<td>{photo.created} <br/> By: {photo.creator}</td>\n\t    \t\t\t\t<td>{photo.notes}</td>\n\t    \t\t\t</tr>\n\t\t\t\t);\n\t\t\t})\n\t\t} else {\n\t\t\treturn <p>No photos within 100 feet.</p>;\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"pictures\">\n\t\t\t<h2>All Pictures</h2>\n\t\t\t<p style={{textAlign: 'center'}}><a href=\"#search\" onClick={props.openSearch}>Advanced Search</a></p>\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Thumbnail</th>\n\t\t\t\t\t\t<th>Title</th>\n\t\t\t\t\t\t<th>Created</th>\n\t\t\t\t\t\t<th>Notes</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{arrayToTable()}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nexport default Table;\n","import Papa from 'papaparse';\nimport csvPhotos from './photos.csv';\n\nasync function GetData() {\n    const data = Papa.parse(await fetchCsv());\n    const result = csvJSON(data.data);\n    return result;\n}\n\nasync function fetchCsv() {\n    const response = await fetch(csvPhotos);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = await decoder.decode(result.value);\n    return csv;\n}\n\nfunction csvJSON(lines) {\n\tlet result = [];\n\tlet headers=lines[0];\n\n\tfor(let i=1;i<lines.length;i++){\n\n\t\tlet obj = {};\n\t\tlet currentline=lines[i];\n\n\t\tfor(let j=0;j<headers.length;j++){\n\t\t  obj[headers[j]] = currentline[j];\n\t\t}\n\n\t\tresult.push(obj);\n\n\t}\n\n\treturn result;\n}\n\nexport default GetData;","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport Search from './Search';\nimport Table from './Table';\nimport csvJSON from './loadData';\n\nfunction App() {\n  const [coords, setCoords] = useState({\n    latitude: 40.731143,\n    longitude: -73.997849\n  });\n\n  const [appState, setAppState] = useState({\n    photos: [],\n    filteredPhotos: []\n  });\n\n  const [searchState, setSearchState] = useState({\n    search: false,\n  });\n\n  useEffect(() => {\n      const getPhotos = async () => {\n        const response = await csvJSON();\n        setAppState({photos: response, filteredPhotos: response});\n      };\n      getPhotos();\n  }, [setAppState]);\n\n  const sortPhotos = () => {\n    setSearchState({search: false});\n    let arr = appState.photos;\n    arr.sort(compareDistance);\n    let newArr = arr.filter((photo) => {\n      let dist = calculateDistance(photo.latitude, photo.longitude);\n      console.log(dist);\n      return (dist < 100) ? true : false;\n    });\n    console.log(newArr);\n    setAppState({photos: arr, filteredPhotos: newArr});\n  }\n\n  const compareDistance = (p1, p2) => {\n    return calculateDistance(p1.latitude, p1.longitude) - calculateDistance(p2.latitude, p2.longitude);\n  }\n\n  const calculateDistance = (lat, long) => {\n    const lat1 = coords.latitude;\n    const long1 = coords.longitude;\n\n    let x = Math.abs(lat1 - lat);\n    let y = Math.abs(long1 -long);\n    return Math.sqrt(x*x + y*y) * 364000;\n  }\n\n  const openSearch = (evt) => {\n    setSearchState({search: true});\n  }\n\n  return (\n    <div className=\"App\">\n      {searchState.search ?\n        <Search coords={coords} setCoords={setCoords} sortPhotos={sortPhotos} photos={appState.photos} close={() => {setSearchState({search: false})}}/>\n        :\n        <div></div>\n      }\n      <Table coords={coords} setCoords={setCoords} photos={appState.filteredPhotos} openSearch={openSearch} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}